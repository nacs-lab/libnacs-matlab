%% Copyright (c) 2018-2018, Yichao Yu <yyc1992@gmail.com>
%
% This library is free software; you can redistribute it and/or
% modify it under the terms of the GNU Lesser General Public
% License as published by the Free Software Foundation; either
% version 3.0 of the License, or (at your option) any later version.
% This library is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
% Lesser General Public License for more details.
% You should have received a copy of the GNU Lesser General Public
% License along with this library.

%%
% Terminology:
% * Parameter: a nested struct that will be passed to `ExpSeq` as the context of a sequence.
% * Scan: a n-dimensional matrix of parameters to iterate over with sequences.
%     This is used to generate a list of parameters.
%     A scan may contain some fixed parameters and some variable parameters.
%     Represented by `ScanParam`.
% * Group: a (orderred) set of scans. Represented by `ScanGroup`.
% * Fallback (parameter/scan):
%     This contains the same information as a scan
%     (and is also represented by `ScanParam`)
%     but it does not correspond to any real sequence.
%     This contains the default fallback parameters for the real scans when the scan
%     does not have any value for a specific field.
% * Base index:
%     This is the index of the scan that is used as fallback for this scan.
%     If this is 0, the default one for the group is used.
% * Run parameter:
%     Parameters for the sequence runner rather than the sequences.
%     There can be only one per group.

%%
% This class represents a group of scans. Supported API:
% For sequence building:
% * grp() / grp() = ...:
%   grp(n) / grp(n) = ...:
%     Access the group's fallback parameter (`grp()`) or
%     the parameter for the n-th scan (`grp(n)`).
%
%     Mutation to the fallback parameter will affect the fallback values of
%     **ALL** scans in this `ScanGroup` including future ones.
%
%     Read access returns a `ScanParam`.
%     Write access constructs a `ScanParam` to **replace** the existing one.
%     The RHS must be another `ScanParam` from the same `ScanGroup` or a `struct`.
%
%     For `ScanParam` RHS, everything is copied. Fallback values are not applied.
%     If the LHS is `grp()`, base index of the RHS is ignored (otherwise, it is copied).
%     For `struct` RHS, all fields are treated as non-scanning parameters.
%     Non-string array field will cause an error.
%     This (`struct` RHS) will also clear the scan and set the base index to `0` (default)
%     (base index ignored when LHS is `grp()`).
%
% * [grp1 grp2 ...] / [grp1, grp2, ...] / horzcat(grp1, grp2, ...):
%     Create a new `ScanGroup` that runs the individual all input scans
%     in the order they are listed.
%     The new group will **NOT** be affected if the inputs are mutated later.
%     The scans with the default base (0) will all have their respected
%     fallback parameters merged into them.
%     Scans with non-default base will have their base index updated
%     to that of their fallback in the new group.
%     The new group size (sequence count) will be the sum of that of the input
%     groups and the order of the scans/sequences will be maintained.
%     The run parameters will be the same as that of the first one.
%
% * setbase(grp, scan, base) / grp.setbase(scan, base):
%     Set the base index of the `scan` to `base`. A `0` `base` means the default base.
%     Throws an error if this would create a loop.
%
%
% For sequence running/saving/loading:
% * groupsize(grp) / grp.groupsize():
%     Number of scans in the group. (Each scan is a N-dimensional matrix)
%
% * scansize(grp, idx) / grp.scansize(idx):
%     Number of sequences in the specific (N-dimensional) scan.
%
% * nseq(grp) / grp.nseq():
%     Number of sequences in the group. This is the sum of `scansize` over all scans.
%
% * getseq(grp, n) / grp.getseq(n):
%     Get the n-th sequence parameter.
%
% * dump(grp) / grp.dump():
%     Return a low level MATLAB data structure that can be saved without
%     refering to any classes related to the scan.
%     This can be later loaded to create an identical scan.
%     If there are significant change on the representation of the scan,
%     the new version is expected to load and convert
%     the result generated by an older version without error.
%
% * ScanGroup.load(obj):
%     This is the reverse of `dump`. Returns a `ScanGroup` that is identical to the
%     one that generates the representation with `dump`.
%
%
% For both:
% * runp(grp) / grp.runp():
%     Run parameters. (parameters for RunSeq/RunScanSeq etc)
%     The returned object is a `DynProps` and can be mutated.
%

%% WARNING!!!:
% Do **NOT** save this (or any) class to `mat` files.
% Saving class in mat files makes it almost (completely?) impossible
% to make major changes while keeping backward compatibility without
% renaming the class.
%
% Instead, one should store the necessary information as basic matlab types
% and allow convert from/to between the runtime format and the saving format.
% Ideally, this information should also be versioned so that future improvements
% can be added without breaking the loading of the old code.
classdef ScanGroup < handle
end
