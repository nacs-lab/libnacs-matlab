%% Copyright (c) 2018-2018, Yichao Yu <yyc1992@gmail.com>
%%
%% This library is free software; you can redistribute it and/or
%% modify it under the terms of the GNU Lesser General Public
%% License as published by the Free Software Foundation; either
%% version 3.0 of the License, or (at your option) any later version.
%% This library is distributed in the hope that it will be useful,
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
%% Lesser General Public License for more details.
%% You should have received a copy of the GNU Lesser General Public
%% License along with this library.

classdef TestScanGroup < matlab.unittest.TestCase
    properties
        print_style = false;
        strong = '';
        endstrong = '';
    end
    methods
        function res = checked_disp(test, g)
            str1 = evalc('disp(g);');
            str2 = evalc('g');
            str3 = evalc('display(g)');
            test.verifyEqual(str1, str3);
            test.verifyEqual(str2, ['g = ', str1]);
            res = str1;
        end

        function seq1 = getseq_novar(test, g, idx)
            seq1 = getseq(g, idx);
            [id, seq2, vars] = getseq_with_var(g, idx);
            test.verifyEqual(id, idx);
            test.verifyEqual(seq1, seq2);
            test.verifyEqual(vars, {});
        end

        function seq = check_and_set(test, seq, path, val)
            test.verifyNotEmpty(path);
            if length(path) == 1
                % The field should not already exist
                test.verifyFalse(isfield(seq, path{1}));
                seq.(path{1}) = val;
                return;
            end
            if isfield(seq, path{1})
                subseq = seq.(path{1});
            else
                subseq = struct();
            end
            seq.(path{1}) = test.check_and_set(subseq, path(2:end), val);
        end

        function [id, seq, vars] = getseq_withvar(test, g, idx)
            seq1 = getseq(g, idx);
            [id, seq2, vars] = getseq_with_var(g, idx);
            test.verifyLessThanOrEqual(id, idx);
            test.verifyNotEqual(seq1, seq2);
            nvars = length(vars);
            test.verifyNotEqual(nvars, 0);

            [id3, seq3, vars3] = getseq_with_var(g, id);
            test.verifyEqual(id3, id);
            test.verifyEqual(seq3, seq2);
            test.verifyEqual(length(vars3), length(vars));

            seq = seq2;
            for i = 1:nvars
                path = vars{i}{1};
                test.verifyEqual(path, vars3{i}{1});
                val = vars{i}{2};
                seq2 = test.check_and_set(seq2, path, val);
            end
            test.verifyEqual(seq1, seq2);
        end
    end
    methods(TestMethodSetup)
        function setup(test)
            try
                useDesktop = usejava('desktop');
            catch
                useDesktop = false;
            end
            test.print_style = useDesktop && ~isdeployed;
            if test.print_style
                test.strong = '<strong>';
                test.endstrong = '</strong>';
            end
        end
    end
    %% Test Method Block
    methods(Test)
        function dotest(test)
            g = ScanGroup();
            test.verifyEqual(g.groupsize(), 1);
            test.verifyEqual(test.checked_disp(g), ['ScanGroup:', 10]);

            g().a = 1;
            b = g();
            test.verifyEqual(test.checked_disp(b), ...
                             ['ScanParam: <default>', 10, ...
                              '  ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '     a: 1', 10, ...
                             ]);
            b.b = 2;
            test.verifyEqual(g.nseq(), 1);
            test.verifyEqual(test.checked_disp(g), ...
                             ['ScanGroup:', 10, ...
                              '  ', test.strong, 'Default:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(b), ...
                             ['ScanParam: <default>', 10, ...
                              '  ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '     a: 1', 10, ...
                              '     b: 2', 10, ...
                             ]);

            b.c.scan(1) = [1, 2, 3];
            test.verifyEqual(g.nseq(), 3);
            test.verifyEqual(test.checked_disp(g), ...
                             ['ScanGroup:', 10, ...
                              '  ', test.strong, 'Default:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '    ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '       c: [1, 2, 3]', 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(b), ...
                             ['ScanParam: <default>', 10, ...
                              '  ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '     a: 1', 10, ...
                              '     b: 2', 10, ...
                              '  ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '     c: [1, 2, 3]', 10, ...
                             ]);

            g(1).c = 3;
            test.verifyEqual(g.nseq(), 1);
            test.verifyEqual(test.checked_disp(g), ...
                             ['ScanGroup:', 10, ...
                              '  ', test.strong, 'Default:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '    ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '       c: [1, 2, 3]', 10, ...
                              '  ', test.strong, 'Scan 1:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       c: 3', 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(b), ...
                             ['ScanParam: <default>', 10, ...
                              '  ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '     a: 1', 10, ...
                              '     b: 2', 10, ...
                              '  ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '     c: [1, 2, 3]', 10, ...
                             ]);

            b.d.scan(2) = [1, 2];
            test.verifyEqual(g.nseq(), 2);
            test.verifyEqual(test.checked_disp(g), ...
                             ['ScanGroup:', 10, ...
                              '  ', test.strong, 'Default:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '    ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '       c: [1, 2, 3]', 10, ...
                              '    ', test.strong, 'Scan dimension 2: (size 2)', test.endstrong, 10, ...
                              '       d: [1, 2]', 10, ...
                              '  ', test.strong, 'Scan 1:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       c: 3', 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(b), ...
                             ['ScanParam: <default>', 10, ...
                              '  ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '     a: 1', 10, ...
                              '     b: 2', 10, ...
                              '  ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '     c: [1, 2, 3]', 10, ...
                              '  ', test.strong, 'Scan dimension 2: (size 2)', test.endstrong, 10, ...
                              '     d: [1, 2]', 10, ...
                             ]);

            s2 = g(2);
            test.verifyEqual(test.checked_disp(s2), ...
                             ['ScanParam: <2>', 10, ...
                              '  ', test.strong, '<Uninitialized>', test.endstrong, 10, ...
                             ]);
            s2.d = 0;
            test.verifyEqual(test.checked_disp(g), ...
                             ['ScanGroup:', 10, ...
                              '  ', test.strong, 'Default:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '    ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '       c: [1, 2, 3]', 10, ...
                              '    ', test.strong, 'Scan dimension 2: (size 2)', test.endstrong, 10, ...
                              '       d: [1, 2]', 10, ...
                              '  ', test.strong, 'Scan 1:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       c: 3', 10, ...
                              '  ', test.strong, 'Scan 2:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       d: 0', 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(s2), ...
                             ['ScanParam: <2>', 10, ...
                              '  ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '     d: 0', 10, ...
                             ]);
            test.verifyEqual(g.groupsize(), 2);
            test.verifyEqual(g.scansize(1), 2);
            test.verifyEqual(g.scansize(2), 3);
            test.verifyEqual(g.nseq(), 5);
            test.verifyEqual(test.getseq_novar(g, 1), struct('c', 3, 'a', 1, 'b', 2, 'd', 1));
            test.verifyEqual(test.getseq_novar(g, 2), struct('c', 3, 'a', 1, 'b', 2, 'd', 2));
            test.verifyEqual(test.getseq_novar(g, 3), struct('d', 0, 'a', 1, 'b', 2, 'c', 1));
            test.verifyEqual(test.getseq_novar(g, 4), struct('d', 0, 'a', 1, 'b', 2, 'c', 2));
            test.verifyEqual(test.getseq_novar(g, 5), struct('d', 0, 'a', 1, 'b', 2, 'c', 3));

            g(end).k.a.b.c = 2;
            test.verifyEqual(test.checked_disp(s2), ...
                             ['ScanParam: <2>', 10, ...
                              '  ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '     d: 0', 10, ...
                              '     k: a.b.c: 2', 10, ...
                             ]);
            test.verifyEqual(g.nseq(), 5);
            kstruct = struct('a', struct('b', struct('c', 2)));
            test.verifyEqual(test.getseq_novar(g, 3), struct('d', 0, 'k', kstruct, 'a', 1, 'b', 2, 'c', 1));

            [x, y] = g.get_scan(2).c;
            test.verifyEqual(x, [1, 2, 3]);
            test.verifyEqual(y, 1);

            g2 = [g, g];
            test.verifyEqual(g2.nseq(), 10);
            for i = 1:5
                test.verifyEqual(test.getseq_novar(g, i), test.getseq_novar(g2, i));
                test.verifyEqual(test.getseq_novar(g, i), test.getseq_novar(g2, i + 5));
            end
            g2dump = dump(g2);
            test.verifyEqual(test.checked_disp(g2), ...
                             ['ScanGroup:', 10, ...
                              '  ', test.strong, 'Scan 1:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       c: 3', 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '    ', test.strong, 'Scan dimension 2: (size 2)', test.endstrong, 10, ...
                              '       d: [1, 2]', 10, ...
                              '  ', test.strong, 'Scan 2:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       d: 0', 10, ...
                              '       k: a.b.c: 2', 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '    ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '       c: [1, 2, 3]', 10, ...
                              '  ', test.strong, 'Scan 3:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       c: 3', 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '    ', test.strong, 'Scan dimension 2: (size 2)', test.endstrong, 10, ...
                              '       d: [1, 2]', 10, ...
                              '  ', test.strong, 'Scan 4:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       d: 0', 10, ...
                              '       k: a.b.c: 2', 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '    ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '       c: [1, 2, 3]', 10, ...
                             ]);

            g3 = [g2(1), g2(2:end)];
            test.verifyEqual(g3.nseq(), 10);
            for i = 1:10
                test.verifyEqual(test.getseq_novar(g2, i), test.getseq_novar(g3, i));
            end
            test.verifyEqual(test.checked_disp(g3), ...
                             ['ScanGroup:', 10, ...
                              '  ', test.strong, 'Scan 1:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       c: 3', 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '    ', test.strong, 'Scan dimension 2: (size 2)', test.endstrong, 10, ...
                              '       d: [1, 2]', 10, ...
                              '  ', test.strong, 'Scan 2:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       d: 0', 10, ...
                              '       k: a.b.c: 2', 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '    ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '       c: [1, 2, 3]', 10, ...
                              '  ', test.strong, 'Scan 3:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       c: 3', 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '    ', test.strong, 'Scan dimension 2: (size 2)', test.endstrong, 10, ...
                              '       d: [1, 2]', 10, ...
                              '  ', test.strong, 'Scan 4:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       d: 0', 10, ...
                              '       k: a.b.c: 2', 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '    ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '       c: [1, 2, 3]', 10, ...
                             ]);

            g.setbase(2, 1);
            test.verifyEqual(g.groupsize(), 2);
            test.verifyEqual(g.scansize(1), 2);
            test.verifyEqual(g.scansize(2), 1);
            test.verifyEqual(g.nseq(), 3);
            test.verifyEqual(test.getseq_novar(g, 1), struct('c', 3, 'a', 1, 'b', 2, 'd', 1));
            test.verifyEqual(test.getseq_novar(g, 2), struct('c', 3, 'a', 1, 'b', 2, 'd', 2));
            test.verifyEqual(test.getseq_novar(g, 3), struct('d', 0, 'k', kstruct, 'c', 3, 'a', 1, 'b', 2));

            % g2 should not be affected
            test.verifyEqual(dump(g2), g2dump);
            test.verifyEqual(test.checked_disp(g2), ...
                             ['ScanGroup:', 10, ...
                              '  ', test.strong, 'Scan 1:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       c: 3', 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '    ', test.strong, 'Scan dimension 2: (size 2)', test.endstrong, 10, ...
                              '       d: [1, 2]', 10, ...
                              '  ', test.strong, 'Scan 2:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       d: 0', 10, ...
                              '       k: a.b.c: 2', 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '    ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '       c: [1, 2, 3]', 10, ...
                              '  ', test.strong, 'Scan 3:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       c: 3', 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '    ', test.strong, 'Scan dimension 2: (size 2)', test.endstrong, 10, ...
                              '       d: [1, 2]', 10, ...
                              '  ', test.strong, 'Scan 4:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       d: 0', 10, ...
                              '       k: a.b.c: 2', 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '    ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '       c: [1, 2, 3]', 10, ...
                             ]);

            test.verifyEqual(test.checked_disp(g.get_scan(1)), ...
                             ['ScanInfo: <1>', 10, ...
                              '  ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '     c: 3', 10, ...
                              '     a: 1', 10, ...
                              '     b: 2', 10, ...
                              '  ', test.strong, 'Scan dimension 2: (size 2)', test.endstrong, 10, ...
                              '     d: [1, 2]', 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(g.get_scan(2)), ...
                             ['ScanInfo: <2>', 10, ...
                              '  ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '     d: 0', 10, ...
                              '     k: a.b.c: 2', 10, ...
                              '     c: 3', 10, ...
                              '     a: 1', 10, ...
                              '     b: 2', 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(g.get_scan(2).k), ...
                             ['SubProp{ScanInfo}: <2> ', test.strong, '[.k]', test.endstrong, 10, ...
                              '  ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '     a.b.c: 2', 10, ...
                             ]);
            test.verifyEqual(fieldnames(g.get_scan(1)), {'c', 'a', 'b', 'd'});
            test.verifyEqual(fieldnames(g.get_scan(2)), {'d', 'k', 'c', 'a', 'b'});
            test.verifyEqual(fieldnames(g.get_scan(2).k), {'a'});

            g.setbase(2, 1);
            test.verifyEqual(g.groupsize(), 2);
            test.verifyEqual(g.scansize(1), 2);
            test.verifyEqual(g.scansize(2), 1);
            test.verifyEqual(g.nseq(), 3);
            test.verifyEqual(test.getseq_novar(g, 1), struct('c', 3, 'a', 1, 'b', 2, 'd', 1));
            test.verifyEqual(test.getseq_novar(g, 2), struct('c', 3, 'a', 1, 'b', 2, 'd', 2));
            test.verifyEqual(test.getseq_novar(g, 3), struct('d', 0, 'k', kstruct, 'c', 3, 'a', 1, 'b', 2));
            test.verifyEqual(test.checked_disp(g), ...
                             ['ScanGroup:', 10, ...
                              '  ', test.strong, 'Default:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '    ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '       c: [1, 2, 3]', 10, ...
                              '    ', test.strong, 'Scan dimension 2: (size 2)', test.endstrong, 10, ...
                              '       d: [1, 2]', 10, ...
                              '  ', test.strong, 'Scan 1:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       c: 3', 10, ...
                              '  ', test.strong, 'Scan 2:', test.endstrong, 10, ...
                              '    ', test.strong, 'Base index: 1', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       d: 0', 10, ...
                              '       k: a.b.c: 2', 10, ...
                             ]);

            [x, y] = g.get_scan(1).c;
            test.verifyEqual(x, 3);
            test.verifyEqual(y, 0);
            [x, y] = g.get_scan(1).d;
            test.verifyEqual(x, [1, 2]);
            test.verifyEqual(y, 2);
            [x, y] = g.get_scan(2).k;
            test.verifyClass(x, 'SubProps');
            test.verifyEqual(y, -1);
            [x, y] = g.get_scan(2).e;
            test.verifyClass(x, 'SubProps');
            test.verifyEqual(y, -1);
            [x, y] = g.get_scan(2).e(2);
            test.verifyEqual(x, 2);
            test.verifyEqual(y, 0);
            [x, y] = g.get_scan(2).e;
            test.verifyClass(x, 'SubProps');
            test.verifyEqual(y, -1);

            test.verifyEqual(g.dump(), ...
                             struct('version', 1, ...
                                    'scans', struct('baseidx', {0, 1}, ...
                                                    'params', {struct('c', 3), ...
                                                               struct('d', 0, 'k', kstruct)}, ...
                                                    'vars', {struct('size', {}, 'params', {}), ...
                                                             struct('size', {}, 'params', {})}), ...
                                    'base', struct('params', struct('a', 1, 'b', 2), ...
                                                   'vars', struct('size', {3, 2}, ...
                                                                  'params', {struct('c', [1, 2, 3]), ...
                                                                             struct('d', [1, 2])})), ...
                                    'runparam', struct(), ...
                                    'use_var_base', struct('def', 0, 'dims', [], ...
                                                           'field', struct()), ...
                                    'use_var_scans', struct('def', {}, 'dims', {}, ...
                                                            'field', {})));

            g3 = ScanGroup.load(g.dump());
            test.verifyEqual(g3.nseq(), 3);
            test.verifyEqual(test.getseq_novar(g3, 1), struct('c', 3, 'a', 1, 'b', 2, 'd', 1));
            test.verifyEqual(test.getseq_novar(g3, 2), struct('c', 3, 'a', 1, 'b', 2, 'd', 2));
            test.verifyEqual(test.getseq_novar(g3, 3), struct('d', 0, 'k', kstruct, 'c', 3, 'a', 1, 'b', 2));
            test.verifyEqual(g3().a(), 1);
            test.verifyEqual(g3(:).b(), 2);
            test.verifyEqual(g3(1).c(), 3);
            test.verifyEqual(g3(2).d(), 0);
            test.verifyEqual(g3(2).k.a.b.c(), 2);
            g3(3) = g3(1);
            test.verifyEqual(g3.nseq(), 5);
            for i = 1:2
                test.verifyEqual(test.getseq_novar(g3, i), test.getseq_novar(g3, 3 + i));
            end
            g3(5) = g3(2);
            test.verifyEqual(g3.nseq(), 12);
            test.verifyEqual(test.getseq_novar(g3, 12), test.getseq_novar(g3, 3));
            i = 1;
            for d = 1:2
                for c = 1:3
                    test.verifyEqual(test.getseq_novar(g3, 5 + i), struct('a', 1, 'b', 2, 'c', c, 'd', d));
                    i = i + 1;
                end
            end
            g3(:).name = 'a long string';
            test.verifyEqual(g3.nseq(), 12);
            test.verifyEqual(test.getseq_novar(g3, 6), struct('a', 1, 'b', 2, 'c', 1, 'd', 1, 'name', 'a long string'));
            g3(4) = struct('c', 5, 'd', 10);
            test.verifyEqual(g3.nseq(), 7);
            test.verifyEqual(test.getseq_novar(g3, 6), struct('a', 1, 'b', 2, 'c', 5, 'd', 10, 'name', 'a long string'));
            test.verifyEqual(test.checked_disp(g3), ...
                             ['ScanGroup:', 10, ...
                              '  ', test.strong, 'Default:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '       name: a long string', 10, ...
                              '    ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '       c: [1, 2, 3]', 10, ...
                              '    ', test.strong, 'Scan dimension 2: (size 2)', test.endstrong, 10, ...
                              '       d: [1, 2]', 10, ...
                              '  ', test.strong, 'Scan 1:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       c: 3', 10, ...
                              '  ', test.strong, 'Scan 2:', test.endstrong, 10, ...
                              '    ', test.strong, 'Base index: 1', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       d: 0', 10, ...
                              '       k: a.b.c: 2', 10, ...
                              '  ', test.strong, 'Scan 3:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       c: 3', 10, ...
                              '  ', test.strong, 'Scan 4:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       c: 5', 10, ...
                              '       d: 10', 10, ...
                              '  ', test.strong, 'Scan 5:', test.endstrong, 10, ...
                              '    ', test.strong, 'Base index: 1', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       d: 0', 10, ...
                              '       k: a.b.c: 2', 10, ...
                             ]);

            rp = runp(g);
            g.runp().a = 3;
            rp.b = 2;
            test.verifyEqual(g.runp().a, 3);
            test.verifyEqual(g.runp().b, 2);
            test.verifyEqual(test.checked_disp(g), ...
                             ['ScanGroup:', 10, ...
                              '  ', test.strong, 'Default:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       a: 1', 10, ...
                              '       b: 2', 10, ...
                              '    ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '       c: [1, 2, 3]', 10, ...
                              '    ', test.strong, 'Scan dimension 2: (size 2)', test.endstrong, 10, ...
                              '       d: [1, 2]', 10, ...
                              '  ', test.strong, 'Scan 1:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       c: 3', 10, ...
                              '  ', test.strong, 'Scan 2:', test.endstrong, 10, ...
                              '    ', test.strong, 'Base index: 1', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       d: 0', 10, ...
                              '       k: a.b.c: 2', 10, ...
                              '  ', test.strong, 'Run parameters:', test.endstrong, 10, ...
                              '     a: 3', 10, ...
                              '     b: 2', 10, ...
                             ]);
        end

        function test_load0(test)
            p0.A = 1;
            p0.B = linspace(10.1, 11, 10);

            p0(2).A = 2;

            g4 = ScanGroup.load(struct('version', 0, 'p', p0, 'scan', struct()));
            test.verifyEqual(g4.nseq(), 20);
            test.verifyEqual(g4.get_fixed(1), struct('A', 1));
            test.verifyEqual(g4.get_fixed(2), struct('A', 2));
            test.verifyEqual(g4.get_vars(1), struct('B', p0(1).B));
            test.verifyEqual(g4.get_vars(1, 1), struct('B', p0(1).B));
            test.verifyEqual(g4.get_vars(2), struct('B', p0(1).B));
            test.verifyEqual(g4.get_vars(2, 1), struct('B', p0(1).B));
            [val, path] = g4.get_scanaxis(1, 1);
            test.verifyEqual(val, p0(1).B);
            test.verifyEqual(path, 'B');
            [val, path] = g4.get_scanaxis(1, 1, 'B');
            test.verifyEqual(val, p0(1).B);
            test.verifyEqual(path, 'B');

            ary2 = (1:length(p0(1).B)) * 2.5;
            g4(2).a.b.c.d.scan(ary2);
            [val, path] = g4.get_scanaxis(2, 1, 'a.b.c.d');
            test.verifyEqual(val, ary2);
            test.verifyEqual(path, 'a.b.c.d');
        end

        function test_load_no_var(test)
            serialized = struct('version', 1, ...
                                'scans', struct('baseidx', {0, 1}, ...
                                                'params', {struct('c', 3), ...
                                                           struct('d', 0, 'k', struct)}, ...
                                                'vars', {struct('size', {}, 'params', {}), ...
                                                         struct('size', {}, 'params', {})}), ...
                                'base', struct('params', struct('a', 1, 'b', 2), ...
                                               'vars', struct('size', {3, 2}, ...
                                                              'params', {struct('c', [1, 2, 3]), ...
                                                                         struct('d', [1, 2])})), ...
                                'runparam', struct());

            g = ScanGroup.load(serialized);

            serialized.use_var_base = struct('def', 0, 'dims', [], 'field', struct());
            serialized.use_var_scans = struct('def', {}, 'dims', {}, 'field', {});

            test.verifyEqual(g.dump(), serialized);
        end

        function test_axisnum(test)
            g = ScanGroup();

            test.verifyEqual(axisnum(g), 0);

            g(end).A.scan(1) = [1, 2, 3, 4];
            g(end).B.scan(1) = [1, 2, 3, 4];
            g(end).C.scan(2) = [1, 2, 3, 4];
            test.verifyEqual(axisnum(g), 2);
            test.verifyEqual(axisnum(g, 1, 1), 2);
            test.verifyEqual(axisnum(g, 1, 2), 1);
            test.verifyEqual(axisnum(g, 1, 100), 0);
        end

        function test_newempty(test)
            % Not touching the first scan before calling new_empty()
            g = ScanGroup();
            test.verifyEqual(g.groupsize(), 1);
            test.verifyEqual(g.new_empty(), 1);
            test.verifyEqual(g.groupsize(), 1);
            test.verifyEqual(g.new_empty(), 2);
            test.verifyEqual(g.groupsize(), 2);

            g = ScanGroup();
            g().A.C = 2;
            test.verifyEqual(g.groupsize(), 1);
            test.verifyEqual(g.new_empty(), 1);
            test.verifyEqual(g.groupsize(), 1);
            test.verifyEqual(g.new_empty(), 2);
            test.verifyEqual(g.groupsize(), 2);

            % Touching the first scan before calling new_empty()
            g = ScanGroup();
            g(1).A.C = 2;
            test.verifyEqual(g.groupsize(), 1);
            test.verifyEqual(g.new_empty(), 2);
            test.verifyEqual(g.groupsize(), 2);

            g = ScanGroup();
            g(1).A.C.scan(2) = [2, 3, 4];
            test.verifyEqual(g.groupsize(), 1);
            test.verifyEqual(g.new_empty(), 2);
            test.verifyEqual(g.groupsize(), 2);
        end

        function test_setbase(test)
            g = ScanGroup();
            setbase(g, 2, 1);
            test.verifyEqual(g.dump(), ...
                             struct('version', 1, ...
                                    'scans', struct('baseidx', {0, 1}, ...
                                                    'params', struct(), ...
                                                    'vars', struct('size', {}, 'params', {})), ...
                                    'base', struct('params', struct(), ...
                                                   'vars', struct('size', {}, ...
                                                                  'params', {})), ...
                                    'runparam', struct(), ...
                                    'use_var_base', struct('def', 0, 'dims', [], ...
                                                           'field', struct()), ...
                                    'use_var_scans', struct('def', {}, 'dims', {}, ...
                                                            'field', {})));
            test.verifyEqual(test.checked_disp(g), ...
                             ['ScanGroup:', 10, ...
                              '  ', test.strong, 'Scan 1:', test.endstrong, 10, ...
                              '    ', test.strong, '<empty>', test.endstrong, 10, ...
                              '  ', test.strong, 'Scan 2:', test.endstrong, 10, ...
                              '    ', test.strong, 'Base index: 1', test.endstrong, 10, ...
                             ]);
            setbase(g, 2, 0);
            test.verifyEqual(g.dump(), ...
                             struct('version', 1, ...
                                    'scans', struct('baseidx', {0, 0}, ...
                                                    'params', struct(), ...
                                                    'vars', struct('size', {}, 'params', {})), ...
                                    'base', struct('params', struct(), ...
                                                   'vars', struct('size', {}, ...
                                                                  'params', {})), ...
                                    'runparam', struct(), ...
                                    'use_var_base', struct('def', 0, 'dims', [], ...
                                                           'field', struct()), ...
                                    'use_var_scans', struct('def', {}, 'dims', {}, ...
                                                            'field', {})));
            test.verifyEqual(test.checked_disp(g), ...
                             ['ScanGroup:', 10, ...
                              '  ', test.strong, 'Scan 1:', test.endstrong, 10, ...
                              '    ', test.strong, '<empty>', test.endstrong, 10, ...
                              '  ', test.strong, 'Scan 2:', test.endstrong, 10, ...
                              '    ', test.strong, '<empty>', test.endstrong, 10, ...
                             ]);
        end

        function test_disp(test)
            g = ScanGroup();
            g.new_empty();
            test.verifyEqual(test.checked_disp(g), ['ScanGroup:', 10]);
            g.new_empty();
            test.verifyEqual(test.checked_disp(g), ...
                             ['ScanGroup:', 10, ...
                              '  ', test.strong, 'Scan 1:', test.endstrong, 10, ...
                              '    ', test.strong, '<empty>', test.endstrong, 10, ...
                              '  ', test.strong, 'Scan 2:', test.endstrong, 10, ...
                              '    ', test.strong, '<empty>', test.endstrong, 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(g([])), ['ScanParam: <>', 10]);
            test.verifyEqual(test.checked_disp(g(1:2)), ...
                             ['ScanParam: <1, 2>', 10, ...
                              '  ', test.strong, 'Scan 1:', test.endstrong, 10, ...
                              '    ', test.strong, '<empty>', test.endstrong, 10, ...
                              '  ', test.strong, 'Scan 2:', test.endstrong, 10, ...
                              '    ', test.strong, '<empty>', test.endstrong, 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(g([1, 3])), ...
                             ['ScanParam: <1, 3>', 10, ...
                              '  ', test.strong, 'Scan 1:', test.endstrong, 10, ...
                              '    ', test.strong, '<empty>', test.endstrong, 10, ...
                              '  ', test.strong, 'Scan 3:', test.endstrong, 10, ...
                              '    ', test.strong, '<Uninitialized>', test.endstrong, 10, ...
                             ]);

            test.verifyEqual(test.checked_disp(g().A.C), ...
                             ['SubProp{ScanParam}: <default> ', test.strong, '[.A.C]', test.endstrong, 10, ...
                              '  ', test.strong, '<empty>', test.endstrong, 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(g(2).A.C), ...
                             ['SubProp{ScanParam}: <2> ', test.strong, '[.A.C]', test.endstrong, 10, ...
                              '  ', test.strong, '<empty>', test.endstrong, 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(g(3).A.B), ...
                             ['SubProp{ScanParam}: <3> ', test.strong, '[.A.B]', test.endstrong, 10, ...
                              '  ', test.strong, '<Uninitialized>', test.endstrong, 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(g([]).X.Y.Z), ...
                             ['SubProp{ScanParam}: <> ', test.strong, '[.X.Y.Z]', test.endstrong, 10]);
            % MATLAB miscounts output variable numbers...
            g(1:2).A.B; % Try to trigger the miscount case to make sure our code handles it well.
            v = g(1:2).A.B;
            test.verifyEqual(test.checked_disp(v), ...
                             ['SubProp{ScanParam}: <1, 2> ', test.strong, '[.A.B]', test.endstrong, 10, ...
                              '  ', test.strong, 'Scan 1: [.A.B]', test.endstrong, 10, ...
                              '    ', test.strong, '<empty>', test.endstrong, 10, ...
                              '  ', test.strong, 'Scan 2: [.A.B]', test.endstrong, 10, ...
                              '    ', test.strong, '<empty>', test.endstrong, 10, ...
                             ]);
            v = g([1, 3]).C.D;
            test.verifyEqual(test.checked_disp(v), ...
                             ['SubProp{ScanParam}: <1, 3> ', test.strong, '[.C.D]', test.endstrong, 10, ...
                              '  ', test.strong, 'Scan 1: [.C.D]', test.endstrong, 10, ...
                              '    ', test.strong, '<empty>', test.endstrong, 10, ...
                              '  ', test.strong, 'Scan 3: [.C.D]', test.endstrong, 10, ...
                              '    ', test.strong, '<Uninitialized>', test.endstrong, 10, ...
                             ]);

            g(2).K.L.scan(1) = [1, 2, 3];
            g(2).M.L.scan(1) = [11, 2, 9];
            g(2).M.P.scan(2) = [10, 11];
            g(2).K.C = 1;
            g(2).K.M = 3;
            test.verifyEqual(test.checked_disp(g(1:2)), ...
                             ['ScanParam: <1, 2>', 10, ...
                              '  ', test.strong, 'Scan 1:', test.endstrong, 10, ...
                              '    ', test.strong, '<empty>', test.endstrong, 10, ...
                              '  ', test.strong, 'Scan 2:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       K:', 10, ...
                              '         C: 1', 10, ...
                              '         M: 3', 10, ...
                              '    ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '       K: L: [1, 2, 3]', 10, ...
                              '       M: L: [11, 2, 9]', 10, ...
                              '    ', test.strong, 'Scan dimension 2: (size 2)', test.endstrong, 10, ...
                              '       M.P: [10, 11]', 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(g([3, 2])), ...
                             ['ScanParam: <3, 2>', 10, ...
                              '  ', test.strong, 'Scan 3:', test.endstrong, 10, ...
                              '    ', test.strong, '<Uninitialized>', test.endstrong, 10, ...
                              '  ', test.strong, 'Scan 2:', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       K:', 10, ...
                              '         C: 1', 10, ...
                              '         M: 3', 10, ...
                              '    ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '       K: L: [1, 2, 3]', 10, ...
                              '       M: L: [11, 2, 9]', 10, ...
                              '    ', test.strong, 'Scan dimension 2: (size 2)', test.endstrong, 10, ...
                              '       M.P: [10, 11]', 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(g().A.C), ...
                             ['SubProp{ScanParam}: <default> ', test.strong, '[.A.C]', test.endstrong, 10, ...
                              '  ', test.strong, '<empty>', test.endstrong, 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(g(2).A.C), ...
                             ['SubProp{ScanParam}: <2> ', test.strong, '[.A.C]', test.endstrong, 10, ...
                              '  ', test.strong, '<empty>', test.endstrong, 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(g(2).K), ...
                             ['SubProp{ScanParam}: <2> ', test.strong, '[.K]', test.endstrong, 10, ...
                              '  ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '     C: 1', 10, ...
                              '     M: 3', 10, ...
                              '  ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '     L: [1, 2, 3]', 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(g(2).K.C), ...
                             ['SubProp{ScanParam}: <2> ', test.strong, '[.K.C]', test.endstrong, 10, ...
                              '  ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '     1', 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(g(2).M), ...
                             ['SubProp{ScanParam}: <2> ', test.strong, '[.M]', test.endstrong, 10, ...
                              '  ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '     L: [11, 2, 9]', 10, ...
                              '  ', test.strong, 'Scan dimension 2: (size 2)', test.endstrong, 10, ...
                              '     P: [10, 11]', 10, ...
                             ]);
            test.verifyEqual(test.checked_disp(g(3).A.B), ...
                             ['SubProp{ScanParam}: <3> ', test.strong, '[.A.B]', test.endstrong, 10, ...
                              '  ', test.strong, '<Uninitialized>', test.endstrong, 10, ...
                             ]);
            v = g(1:2).K;
            test.verifyEqual(test.checked_disp(v), ...
                             ['SubProp{ScanParam}: <1, 2> ', test.strong, '[.K]', test.endstrong, 10, ...
                              '  ', test.strong, 'Scan 1: [.K]', test.endstrong, 10, ...
                              '    ', test.strong, '<empty>', test.endstrong, 10, ...
                              '  ', test.strong, 'Scan 2: [.K]', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       C: 1', 10, ...
                              '       M: 3', 10, ...
                              '    ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '       L: [1, 2, 3]', 10, ...
                             ]);
            v = g(2:3).K.C;
            test.verifyEqual(test.checked_disp(v), ...
                             ['SubProp{ScanParam}: <2, 3> ', test.strong, '[.K.C]', test.endstrong, 10, ...
                              '  ', test.strong, 'Scan 2: [.K.C]', test.endstrong, 10, ...
                              '    ', test.strong, 'Fixed parameters:', test.endstrong, 10, ...
                              '       1', 10, ...
                              '  ', test.strong, 'Scan 3: [.K.C]', test.endstrong, 10, ...
                              '    ', test.strong, '<Uninitialized>', test.endstrong, 10, ...
                             ]);
            v = g([3, 2]).M;
            test.verifyEqual(test.checked_disp(v), ...
                             ['SubProp{ScanParam}: <3, 2> ', test.strong, '[.M]', test.endstrong, 10, ...
                              '  ', test.strong, 'Scan 3: [.M]', test.endstrong, 10, ...
                              '    ', test.strong, '<Uninitialized>', test.endstrong, 10, ...
                              '  ', test.strong, 'Scan 2: [.M]', test.endstrong, 10, ...
                              '    ', test.strong, 'Scan dimension 1: (size 3)', test.endstrong, 10, ...
                              '       L: [11, 2, 9]', 10, ...
                              '    ', test.strong, 'Scan dimension 2: (size 2)', test.endstrong, 10, ...
                              '       P: [10, 11]', 10, ...
                             ]);
        end

        function test_get_scanaxis(test)
            g = ScanGroup();
            g(end).A.B.C = 2;
            g(end).A.C.D = 3;
            g(end).K.L = 4;
            g(end).K.Z = 42;
            g(end).A.B.E.scan([1, 2, 3, 4]);
            g(end).A.C.F.scan(1) = [2, 3, 4, 5];
            g(end).A.C.X.scan(1) = [3, 2, 1, 0];
            g(end).K.M.scan(2) = [1, 2, 3];
            g(end).K.Y.scan(2) = [2, 3, 4];
            test.verifyEqual(get_scanaxis(g, 1, 1, 1), [1, 2, 3, 4]);
            test.verifyEqual(get_scanaxis(g, 1, 1, 2), [2, 3, 4, 5]);
            test.verifyEqual(get_scanaxis(g, 1, 1, 3), [3, 2, 1, 0]);
            test.verifyEqual(get_scanaxis(g, 1, 1, 'A.B.E'), [1, 2, 3, 4]);
            test.verifyEqual(get_scanaxis(g, 1, 1, 'A.C.F'), [2, 3, 4, 5]);
            test.verifyEqual(get_scanaxis(g, 1, 1, 'A.C.X'), [3, 2, 1, 0]);

            test.verifyEqual(get_scanaxis(g, 1, 2, 1), [1, 2, 3]);
            test.verifyEqual(get_scanaxis(g, 1, 2, 2), [2, 3, 4]);
            test.verifyEqual(get_scanaxis(g, 1, 2, 'K.M'), [1, 2, 3]);
            test.verifyEqual(get_scanaxis(g, 1, 2, 'K.Y'), [2, 3, 4]);

            % This is a bit ugly but it matches with how we automatically decay
            % a scan with size 1 to a fixed parameter.
            test.verifyEqual(get_scanaxis(g, 1, 3, 1), 2);
            test.verifyEqual(get_scanaxis(g, 1, 3, 2), 3);
            test.verifyEqual(get_scanaxis(g, 1, 3, 3), 4);
            test.verifyEqual(get_scanaxis(g, 1, 3, 4), 42);
            test.verifyEqual(get_scanaxis(g, 1, 3, 'A.B.C'), 2);
            test.verifyEqual(get_scanaxis(g, 1, 3, 'A.C.D'), 3);
            test.verifyEqual(get_scanaxis(g, 1, 3, 'K.L'), 4);
            test.verifyEqual(get_scanaxis(g, 1, 3, 'K.Z'), 42);
        end

        function test_assign_scan(test)
            g = ScanGroup();
            g().A.B = 2;
            g().A.C = 34;
            g().C.scan(1) = [1, 2, 3];
            g().D.scan(2) = [2, 3];
            g0dump = struct('version', 1, ...
                            'scans', struct('baseidx', 0, ...
                                            'params', struct(), ...
                                            'vars', struct('size', {}, 'params', {})), ...
                            'base', struct('params', struct('A', struct('B', 2, ...
                                                                        'C', 34)), ...
                                           'vars', struct('size', {3, 2}, ...
                                                          'params', {struct('C', [1, 2, 3]), ...
                                                                     struct('D', [2, 3])})), ...
                            'runparam', struct(), ...
                            'use_var_base', struct('def', 0, 'dims', [], ...
                                                   'field', struct()), ...
                            'use_var_scans', struct('def', {}, 'dims', {}, ...
                                                    'field', {}));
            test.verifyEqual(g.dump(), g0dump);
            test.verifyEqual(g.nseq(), 6);
            g(:) = g();
            test.verifyEqual(g.dump(), g0dump);
            test.verifyEqual(g.nseq(), 6);
            g(2) = g();
            g1dump = struct('version', 1, ...
                            'scans', struct('baseidx', 0, ...
                                            'params', {struct(), ...
                                                       struct('A', struct('B', 2, ...
                                                                          'C', 34))}, ...
                                            'vars', {struct('size', {}, 'params', {}), ...
                                                     struct('size', {3, 2}, ...
                                                            'params', {struct('C', [1, 2, 3]), ...
                                                                       struct('D', [2, 3])})}), ...
                            'base', struct('params', struct('A', struct('B', 2, ...
                                                                        'C', 34)), ...
                                           'vars', struct('size', {3, 2}, ...
                                                          'params', {struct('C', [1, 2, 3]), ...
                                                                     struct('D', [2, 3])})), ...
                            'runparam', struct(), ...
                            'use_var_base', struct('def', 0, 'dims', [], ...
                                                   'field', struct()), ...
                            'use_var_scans', struct('def', {0, 0}, 'dims', [], ...
                                                    'field', struct()));
            test.verifyEqual(g.dump(), g1dump);
            test.verifyEqual(g.nseq(), 12);

            g().K = 100;
            g().Y.scan(1) = [12, 13, 42];
            g().E.scan(3) = [1, 2, 3, 4, 5];
            test.verifyEqual(g.nseq(), 60);
            g2dump = struct('version', 1, ...
                            'scans', struct('baseidx', 0, ...
                                            'params', {struct(), ...
                                                       struct('A', struct('B', 2, ...
                                                                          'C', 34))}, ...
                                            'vars', {struct('size', {}, 'params', {}), ...
                                                     struct('size', {3, 2}, ...
                                                            'params', {struct('C', [1, 2, 3]), ...
                                                                       struct('D', [2, 3])})}), ...
                            'base', struct('params', struct('A', struct('B', 2, ...
                                                                        'C', 34), ...
                                                            'K', 100), ...
                                           'vars', struct('size', {3, 2, 5}, ...
                                                          'params', {struct('C', [1, 2, 3], ...
                                                                            'Y', [12, 13, 42]), ...
                                                                     struct('D', [2, 3]), ...
                                                                     struct('E', [1, 2, 3, 4, 5])})), ...
                            'runparam', struct(), ...
                            'use_var_base', struct('def', 0, 'dims', [], ...
                                                   'field', struct()), ...
                            'use_var_scans', struct('def', {0, 0}, 'dims', [], ...
                                                    'field', struct()));
            test.verifyEqual(g.dump(), g2dump);
            g(:) = g(2);
            test.verifyEqual(g.dump(), g1dump);
            test.verifyEqual(g.nseq(), 12);
            g(:) = g(1);
            g3dump = struct('version', 1, ...
                            'scans', struct('baseidx', 0, ...
                                            'params', {struct(), ...
                                                       struct('A', struct('B', 2, ...
                                                                          'C', 34))}, ...
                                            'vars', {struct('size', {}, 'params', {}), ...
                                                     struct('size', {3, 2}, ...
                                                            'params', {struct('C', [1, 2, 3]), ...
                                                                       struct('D', [2, 3])})}), ...
                            'base', struct('params', struct(), ...
                                           'vars', struct('size', {}, 'params', {})), ...
                            'runparam', struct(), ...
                            'use_var_base', struct('def', 0, 'dims', [], ...
                                                   'field', struct()), ...
                            'use_var_scans', struct('def', {0, 0}, 'dims', [], ...
                                                    'field', struct()));
            test.verifyEqual(g.dump(), g3dump);
            test.verifyEqual(g.nseq(), 7);

            g(:) = struct('C', 1, 'D', 123);
            g4dump = struct('version', 1, ...
                            'scans', struct('baseidx', 0, ...
                                            'params', {struct(), ...
                                                       struct('A', struct('B', 2, ...
                                                                          'C', 34))}, ...
                                            'vars', {struct('size', {}, 'params', {}), ...
                                                     struct('size', {3, 2}, ...
                                                            'params', {struct('C', [1, 2, 3]), ...
                                                                       struct('D', [2, 3])})}), ...
                            'base', struct('params', struct('C', 1, 'D', 123), ...
                                           'vars', struct('size', {}, 'params', {})), ...
                            'runparam', struct(), ...
                            'use_var_base', struct('def', 0, 'dims', [], ...
                                                   'field', struct()), ...
                            'use_var_scans', struct('def', {0, 0}, 'dims', [], ...
                                                    'field', struct()));
            test.verifyEqual(g.dump(), g4dump);
            test.verifyEqual(g.nseq(), 7);
        end

        function test_param_size(test)
            g = ScanGroup();
            test.verifyEqual(size(g(), 1), 1);
            test.verifyEqual(size(g(), 2), 1);
            test.verifyEqual(size(g(1), 1), 1);
            test.verifyEqual(size(g(1), 2), 1);
            test.verifyEqual(size(g(2), 1), 1);
            test.verifyEqual(size(g(2), 2), 1);

            p0 = g();
            p0.A.scan(2, [1, 2, 3]);
            p0.B.scan([5, 6]);
            test.verifyEqual(size(g(), 1), 2);
            test.verifyEqual(size(g(), 2), 3);
            test.verifyEqual(size(g(1), 1), 1);
            test.verifyEqual(size(g(1), 2), 1);

            p2 = g(2);
            p2.K.scan(3, [1, 2, 3, 4, 5]);
            test.verifyEqual(size(g(1), 1), 1);
            test.verifyEqual(size(g(1), 2), 1);
            test.verifyEqual(size(g(2), 1), 1);
            test.verifyEqual(size(g(2), 2), 1);
            test.verifyEqual(size(g(2), 3), 5);
        end

        function test_scan_nonarray(test)
            g = ScanGroup();

            g().A.B.scan(1, 2);
            g().A.C.scan(10);
            g().B.scan(3, 'abcdef');
            test.verifyEqual(g.dump(), ...
                             struct('version', 1, ...
                                    'scans', struct('baseidx', 0, ...
                                                    'params', struct(), ...
                                                    'vars', struct('size', {}, 'params', {})), ...
                                    'base', struct('params', struct('A', ...
                                                                    struct('B', 2, 'C', 10), ...
                                                                    'B', 'abcdef'), ...
                                                   'vars', struct('size', {}, ...
                                                                  'params', {})), ...
                                    'runparam', struct(), ...
                                    'use_var_base', struct('def', 0, 'dims', [], ...
                                                           'field', struct()), ...
                                    'use_var_scans', struct('def', {}, 'dims', {}, ...
                                                            'field', {})));
        end

        function test_param_toscan(test)
            g = ScanGroup();

            g().A.B = 1;
            g().A.C.scan([2, 3, 4]);
            g(1).C.D = 100;
            g(1).A.B.scan(2) = [2, 3, 4, 4, 5];
            g.runp().A.K = 23;

            g0 = toscan(g());
            test.verifyEqual(g0.dump(), ...
                             struct('version', 1, ...
                                    'scans', struct('baseidx', 0, ...
                                                    'params', struct('A', struct('B', 1)), ...
                                                    'vars', struct('size', 3, ...
                                                                   'params', struct('A', struct('C', [2, 3, 4])))), ...
                                    'base', struct('params', struct(), ...
                                                   'vars', struct('size', {}, ...
                                                                  'params', {})), ...
                                    'runparam', struct('A', struct('K', 23)), ...
                                    'use_var_base', struct('def', 0, 'dims', [], ...
                                                           'field', struct()), ...
                                    'use_var_scans', struct('def', 0, 'dims', [], ...
                                                            'field', struct())));
            g1 = toscan(g(1));
            test.verifyEqual(g1.dump(), ...
                             struct('version', 1, ...
                                    'scans', struct('baseidx', 0, ...
                                                    'params', struct('C', struct('D', 100)), ...
                                                    'vars', struct('size', {3, 5}, ...
                                                                   'params', {struct('A', struct('C', [2, 3, 4])), ...
                                                                              struct('A', struct('B', [2, 3, 4, 4, 5]))})), ...
                                    'base', struct('params', struct(), ...
                                                   'vars', struct('size', {}, ...
                                                                  'params', {})), ...
                                    'runparam', struct('A', struct('K', 23)), ...
                                    'use_var_base', struct('def', 0, 'dims', [], ...
                                                           'field', struct()), ...
                                    'use_var_scans', struct('def', 0, 'dims', [], ...
                                                            'field', struct())));
        end

        function test_usevar(test)
            g = ScanGroup();

            g().A.B.scan(2, [1, 2, 3]);
            g().A.C.scan([2, 3, 4, 5, 6]);
            g(1).B.K.scan(3, [1, 2]);
            g(2).C.L.scan(2, [2, 3, 4]);

            g.usevar(true);
            gdump = struct('version', 1, ...
                           'scans', struct('baseidx', 0, ...
                                           'params', struct(), ...
                                           'vars', {struct('size', {0, 0, 2}, ...
                                                           'params', {struct(), struct(), ...
                                                                      struct('B', struct('K', [1, 2]))}), ...
                                                    struct('size', {0, 3}, ...
                                                           'params', {struct(), ...
                                                                      struct('C', struct('L', [2, 3, 4]))})}), ...
                           'base', struct('params', struct(), ...
                                          'vars', struct('size', {5, 3}, ...
                                                         'params', {struct('A', struct('C', [2, 3, 4, 5, 6])), ...
                                                                    struct('A', struct('B', [1, 2, 3]))})), ...
                           'runparam', struct(), ...
                           'use_var_base', struct('def', 1, 'dims', [], ...
                                                  'field', struct()), ...
                           'use_var_scans', struct('def', {}, 'dims', {}, ...
                                                   'field', {}));
            test.verifyEqual(g.dump(), gdump);

            test.verifyEqual(nseq(g), 45);
            [id, seq, vars] = test.getseq_withvar(g, 1);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...
                                    {{'A', 'B'}, 1}, ...
                                    {{'B', 'K'}, 1}, ...
                                   });
            [id, seq, vars] = test.getseq_withvar(g, 2);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 3}, ...
                                    {{'A', 'B'}, 1}, ...
                                    {{'B', 'K'}, 1}, ...
                                   });
            [id, seq, vars] = test.getseq_withvar(g, 3);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 4}, ...
                                    {{'A', 'B'}, 1}, ...
                                    {{'B', 'K'}, 1}, ...
                                   });
            [id, seq, vars] = test.getseq_withvar(g, 6);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...
                                    {{'A', 'B'}, 2}, ...
                                    {{'B', 'K'}, 1}, ...
                                   });
            [id, seq, vars] = test.getseq_withvar(g, 16);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...
                                    {{'A', 'B'}, 1}, ...
                                    {{'B', 'K'}, 2}, ...
                                   });

            [id, seq, vars] = test.getseq_withvar(g, 31);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...
                                    {{'C', 'L'}, 2}, ...
                                    {{'A', 'B'}, 1}, ...
                                   });
            [id, seq, vars] = test.getseq_withvar(g, 32);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 3}, ...
                                    {{'C', 'L'}, 2}, ...
                                    {{'A', 'B'}, 1}, ...
                                   });
            [id, seq, vars] = test.getseq_withvar(g, 36);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...
                                    {{'C', 'L'}, 3}, ...
                                    {{'A', 'B'}, 2}, ...
                                   });

            g = ScanGroup.load(gdump);
            test.verifyEqual(nseq(g), 45);
            [id, seq, vars] = test.getseq_withvar(g, 1);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...
                                    {{'A', 'B'}, 1}, ...
                                    {{'B', 'K'}, 1}, ...
                                   });
            [id, seq, vars] = test.getseq_withvar(g, 2);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 3}, ...
                                    {{'A', 'B'}, 1}, ...
                                    {{'B', 'K'}, 1}, ...
                                   });
            [id, seq, vars] = test.getseq_withvar(g, 3);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 4}, ...
                                    {{'A', 'B'}, 1}, ...
                                    {{'B', 'K'}, 1}, ...
                                   });
            [id, seq, vars] = test.getseq_withvar(g, 6);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...
                                    {{'A', 'B'}, 2}, ...
                                    {{'B', 'K'}, 1}, ...
                                   });
            [id, seq, vars] = test.getseq_withvar(g, 16);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...
                                    {{'A', 'B'}, 1}, ...
                                    {{'B', 'K'}, 2}, ...
                                   });

            [id, seq, vars] = test.getseq_withvar(g, 31);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...
                                    {{'C', 'L'}, 2}, ...
                                    {{'A', 'B'}, 1}, ...
                                   });
            [id, seq, vars] = test.getseq_withvar(g, 32);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 3}, ...
                                    {{'C', 'L'}, 2}, ...
                                    {{'A', 'B'}, 1}, ...
                                   });
            [id, seq, vars] = test.getseq_withvar(g, 36);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...
                                    {{'C', 'L'}, 3}, ...
                                    {{'A', 'B'}, 2}, ...
                                   });

            % Test cache invalidation
            usevar(g, false);
            usevar(g, true, 3);
            g2dump = struct('version', 1, ...
                            'scans', struct('baseidx', 0, ...
                                            'params', struct(), ...
                                            'vars', {struct('size', {0, 0, 2}, ...
                                                            'params', {struct(), struct(), ...
                                                                       struct('B', struct('K', [1, 2]))}), ...
                                                     struct('size', {0, 3}, ...
                                                            'params', {struct(), ...
                                                                       struct('C', struct('L', [2, 3, 4]))})}), ...
                            'base', struct('params', struct(), ...
                                           'vars', struct('size', {5, 3}, ...
                                                          'params', {struct('A', struct('C', [2, 3, 4, 5, 6])), ...
                                                                     struct('A', struct('B', [1, 2, 3]))})), ...
                            'runparam', struct(), ...
                            'use_var_base', struct('def', -1, 'dims', [0, 0, 1], ...
                                                   'field', struct()), ...
                            'use_var_scans', struct('def', {}, 'dims', {}, ...
                                                    'field', {}));
            test.verifyEqual(g.dump(), g2dump);

            [id, seq, vars] = test.getseq_withvar(g, 1);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 1)));
            test.verifyEqual(vars, {{{'B', 'K'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 2);
            test.verifyEqual(id, 2);
            test.verifyEqual(seq, struct('A', struct('C', 3, 'B', 1)));
            test.verifyEqual(vars, {{{'B', 'K'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 6);
            test.verifyEqual(id, 6);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 2)));
            test.verifyEqual(vars, {{{'B', 'K'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 16);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 1)));
            test.verifyEqual(vars, {{{'B', 'K'}, 2}});
            [id, seq, vars] = test.getseq_withvar(g, 17);
            test.verifyEqual(id, 2);
            test.verifyEqual(seq, struct('A', struct('C', 3, 'B', 1)));
            test.verifyEqual(vars, {{{'B', 'K'}, 2}});
            [id, seq, vars] = test.getseq_withvar(g, 21);
            test.verifyEqual(id, 6);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 2)));
            test.verifyEqual(vars, {{{'B', 'K'}, 2}});

            seq = test.getseq_novar(g, 31);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 1), ...
                                         'C', struct('L', 2)));
            seq = test.getseq_novar(g, 32);
            test.verifyEqual(seq, struct('A', struct('C', 3, 'B', 1), ...
                                         'C', struct('L', 2)));
            seq = test.getseq_novar(g, 36);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 2), ...
                                         'C', struct('L', 3)));


            g(1).usevar(false);
            g2dump = struct('version', 1, ...
                            'scans', struct('baseidx', 0, ...
                                            'params', struct(), ...
                                            'vars', {struct('size', {0, 0, 2}, ...
                                                            'params', {struct(), struct(), ...
                                                                       struct('B', struct('K', [1, 2]))}), ...
                                                     struct('size', {0, 3}, ...
                                                            'params', {struct(), ...
                                                                       struct('C', struct('L', [2, 3, 4]))})}), ...
                            'base', struct('params', struct(), ...
                                           'vars', struct('size', {5, 3}, ...
                                                          'params', {struct('A', struct('C', [2, 3, 4, 5, 6])), ...
                                                                     struct('A', struct('B', [1, 2, 3]))})), ...
                            'runparam', struct(), ...
                            'use_var_base', struct('def', -1, 'dims', [0, 0, 1], ...
                                                   'field', struct()), ...
                            'use_var_scans', struct('def', -1, 'dims', [], ...
                                                    'field', struct()));
            test.verifyEqual(g.dump(), g2dump);

            [id, seq, vars] = test.getseq_withvar(g, 1);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 1)));
            test.verifyEqual(vars, {{{'B', 'K'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 2);
            test.verifyEqual(id, 2);
            test.verifyEqual(seq, struct('A', struct('C', 3, 'B', 1)));
            test.verifyEqual(vars, {{{'B', 'K'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 6);
            test.verifyEqual(id, 6);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 2)));
            test.verifyEqual(vars, {{{'B', 'K'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 16);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 1)));
            test.verifyEqual(vars, {{{'B', 'K'}, 2}});
            [id, seq, vars] = test.getseq_withvar(g, 17);
            test.verifyEqual(id, 2);
            test.verifyEqual(seq, struct('A', struct('C', 3, 'B', 1)));
            test.verifyEqual(vars, {{{'B', 'K'}, 2}});
            [id, seq, vars] = test.getseq_withvar(g, 21);
            test.verifyEqual(id, 6);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 2)));
            test.verifyEqual(vars, {{{'B', 'K'}, 2}});

            seq = test.getseq_novar(g, 31);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 1), ...
                                         'C', struct('L', 2)));
            seq = test.getseq_novar(g, 32);
            test.verifyEqual(seq, struct('A', struct('C', 3, 'B', 1), ...
                                         'C', struct('L', 2)));
            seq = test.getseq_novar(g, 36);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 2), ...
                                         'C', struct('L', 3)));


            g(1).usevar(true);
            g2dump = struct('version', 1, ...
                            'scans', struct('baseidx', 0, ...
                                            'params', struct(), ...
                                            'vars', {struct('size', {0, 0, 2}, ...
                                                            'params', {struct(), struct(), ...
                                                                       struct('B', struct('K', [1, 2]))}), ...
                                                     struct('size', {0, 3}, ...
                                                            'params', {struct(), ...
                                                                       struct('C', struct('L', [2, 3, 4]))})}), ...
                            'base', struct('params', struct(), ...
                                           'vars', struct('size', {5, 3}, ...
                                                          'params', {struct('A', struct('C', [2, 3, 4, 5, 6])), ...
                                                                     struct('A', struct('B', [1, 2, 3]))})), ...
                            'runparam', struct(), ...
                            'use_var_base', struct('def', -1, 'dims', [0, 0, 1], ...
                                                   'field', struct()), ...
                            'use_var_scans', struct('def', 1, 'dims', [], ...
                                                    'field', struct()));
            test.verifyEqual(g.dump(), g2dump);

            [id, seq, vars] = test.getseq_withvar(g, 1);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...
                                    {{'A', 'B'}, 1}, ...
                                    {{'B', 'K'}, 1}, ...
                                   });
            [id, seq, vars] = test.getseq_withvar(g, 2);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 3}, ...
                                    {{'A', 'B'}, 1}, ...
                                    {{'B', 'K'}, 1}, ...
                                   });
            [id, seq, vars] = test.getseq_withvar(g, 3);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 4}, ...
                                    {{'A', 'B'}, 1}, ...
                                    {{'B', 'K'}, 1}, ...
                                   });
            [id, seq, vars] = test.getseq_withvar(g, 6);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...
                                    {{'A', 'B'}, 2}, ...
                                    {{'B', 'K'}, 1}, ...
                                   });
            [id, seq, vars] = test.getseq_withvar(g, 16);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...
                                    {{'A', 'B'}, 1}, ...
                                    {{'B', 'K'}, 2}, ...
                                   });

            seq = test.getseq_novar(g, 31);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 1), ...
                                         'C', struct('L', 2)));
            seq = test.getseq_novar(g, 32);
            test.verifyEqual(seq, struct('A', struct('C', 3, 'B', 1), ...
                                         'C', struct('L', 2)));
            seq = test.getseq_novar(g, 36);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 2), ...
                                         'C', struct('L', 3)));


            g = ScanGroup.load(gdump);
            usevar(g, false);
            g(2).usevar(true, 2);
            g2dump = struct('version', 1, ...
                            'scans', struct('baseidx', 0, ...
                                            'params', struct(), ...
                                            'vars', {struct('size', {0, 0, 2}, ...
                                                            'params', {struct(), struct(), ...
                                                                       struct('B', struct('K', [1, 2]))}), ...
                                                     struct('size', {0, 3}, ...
                                                            'params', {struct(), ...
                                                                       struct('C', struct('L', [2, 3, 4]))})}), ...
                            'base', struct('params', struct(), ...
                                           'vars', struct('size', {5, 3}, ...
                                                          'params', {struct('A', struct('C', [2, 3, 4, 5, 6])), ...
                                                                     struct('A', struct('B', [1, 2, 3]))})), ...
                            'runparam', struct(), ...
                            'use_var_base', struct('def', -1, 'dims', [], ...
                                                   'field', struct()), ...
                            'use_var_scans', struct('def', 0, 'dims', {[], [0, 1]}, ...
                                                    'field', struct()));
            test.verifyEqual(g.dump(), g2dump);

            seq = test.getseq_novar(g, 1);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 1), ...
                                         'B', struct('K', 1)));
            seq = test.getseq_novar(g, 2);
            test.verifyEqual(seq, struct('A', struct('C', 3, 'B', 1), ...
                                         'B', struct('K', 1)));

            [id, seq, vars] = test.getseq_withvar(g, 31);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct('A', struct('C', 2)));
            test.verifyEqual(vars, {{{'C', 'L'}, 2}, ...
                                    {{'A', 'B'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 32);
            test.verifyEqual(id, 32);
            test.verifyEqual(seq, struct('A', struct('C', 3)));
            test.verifyEqual(vars, {{{'C', 'L'}, 2}, ...
                                    {{'A', 'B'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 36);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct('A', struct('C', 2)));
            test.verifyEqual(vars, {{{'C', 'L'}, 3}, ...
                                    {{'A', 'B'}, 2}});


            g().usevar(true, 1);
            g().usevar(true, 3);
            g2dump = struct('version', 1, ...
                            'scans', struct('baseidx', 0, ...
                                            'params', struct(), ...
                                            'vars', {struct('size', {0, 0, 2}, ...
                                                            'params', {struct(), struct(), ...
                                                                       struct('B', struct('K', [1, 2]))}), ...
                                                     struct('size', {0, 3}, ...
                                                            'params', {struct(), ...
                                                                       struct('C', struct('L', [2, 3, 4]))})}), ...
                            'base', struct('params', struct(), ...
                                           'vars', struct('size', {5, 3}, ...
                                                          'params', {struct('A', struct('C', [2, 3, 4, 5, 6])), ...
                                                                     struct('A', struct('B', [1, 2, 3]))})), ...
                            'runparam', struct(), ...
                            'use_var_base', struct('def', -1, 'dims', [1, 0, 1], ...
                                                   'field', struct()), ...
                            'use_var_scans', struct('def', 0, 'dims', {[], [0, 1]}, ...
                                                    'field', struct()));
            test.verifyEqual(g.dump(), g2dump);

            [id, seq, vars] = test.getseq_withvar(g, 1);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct('A', struct('B', 1)));
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...,
                                    {{'B', 'K'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 2);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct('A', struct('B', 1)));
            test.verifyEqual(vars, {{{'A', 'C'}, 3}, ...,
                                    {{'B', 'K'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 6);
            test.verifyEqual(id, 6);
            test.verifyEqual(seq, struct('A', struct('B', 2)));
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...,
                                    {{'B', 'K'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 16);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct('A', struct('B', 1)));
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...,
                                    {{'B', 'K'}, 2}});

            [id, seq, vars] = test.getseq_withvar(g, 31);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...,
                                    {{'C', 'L'}, 2}, ...
                                    {{'A', 'B'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 32);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 3}, ...,
                                    {{'C', 'L'}, 2}, ...
                                    {{'A', 'B'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 36);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...,
                                    {{'C', 'L'}, 3}, ...
                                    {{'A', 'B'}, 2}});


            g(1).usevar(false, 1);
            g2dump = struct('version', 1, ...
                            'scans', struct('baseidx', 0, ...
                                            'params', struct(), ...
                                            'vars', {struct('size', {0, 0, 2}, ...
                                                            'params', {struct(), struct(), ...
                                                                       struct('B', struct('K', [1, 2]))}), ...
                                                     struct('size', {0, 3}, ...
                                                            'params', {struct(), ...
                                                                       struct('C', struct('L', [2, 3, 4]))})}), ...
                            'base', struct('params', struct(), ...
                                           'vars', struct('size', {5, 3}, ...
                                                          'params', {struct('A', struct('C', [2, 3, 4, 5, 6])), ...
                                                                     struct('A', struct('B', [1, 2, 3]))})), ...
                            'runparam', struct(), ...
                            'use_var_base', struct('def', -1, 'dims', [1, 0, 1], ...
                                                   'field', struct()), ...
                            'use_var_scans', struct('def', 0, 'dims', {[-1], [0, 1]}, ...
                                                    'field', struct()));
            test.verifyEqual(g.dump(), g2dump);

            [id, seq, vars] = test.getseq_withvar(g, 1);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 1)));
            test.verifyEqual(vars, {{{'B', 'K'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 2);
            test.verifyEqual(id, 2);
            test.verifyEqual(seq, struct('A', struct('C', 3, 'B', 1)));
            test.verifyEqual(vars, {{{'B', 'K'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 6);
            test.verifyEqual(id, 6);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 2)));
            test.verifyEqual(vars, {{{'B', 'K'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 16);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 1)));
            test.verifyEqual(vars, {{{'B', 'K'}, 2}});

            [id, seq, vars] = test.getseq_withvar(g, 31);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...,
                                    {{'C', 'L'}, 2}, ...
                                    {{'A', 'B'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 32);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 3}, ...,
                                    {{'C', 'L'}, 2}, ...
                                    {{'A', 'B'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 36);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...,
                                    {{'C', 'L'}, 3}, ...
                                    {{'A', 'B'}, 2}});


            g().A.C.usevar(true);
            g().B.K.usevar(false, 3);
            g().C.L.usevar(false);
            g2dump = struct('version', 1, ...
                            'scans', struct('baseidx', 0, ...
                                            'params', struct(), ...
                                            'vars', {struct('size', {0, 0, 2}, ...
                                                            'params', {struct(), struct(), ...
                                                                       struct('B', struct('K', [1, 2]))}), ...
                                                     struct('size', {0, 3}, ...
                                                            'params', {struct(), ...
                                                                       struct('C', struct('L', [2, 3, 4]))})}), ...
                            'base', struct('params', struct(), ...
                                           'vars', struct('size', {5, 3}, ...
                                                          'params', {struct('A', struct('C', [2, 3, 4, 5, 6])), ...
                                                                     struct('A', struct('B', [1, 2, 3]))})), ...
                            'runparam', struct(), ...
                            'use_var_base', struct('def', -1, 'dims', [1, 0, 1], ...
                                                   'field', struct('A', struct('def', 0, 'dims', [], ...
                                                                               'field', struct('C', struct('def', 1, 'dims', [], ...
                                                                                                           'field', struct()))), ...
                                                                   'B', struct('def', 0, 'dims', [], ...
                                                                               'field', struct('K', struct('def', 0, 'dims', [0, 0, -1], ...
                                                                                                           'field', struct()))), ...
                                                                   'C', struct('def', 0, 'dims', [], ...
                                                                               'field', struct('L', struct('def', -1, 'dims', [], ...
                                                                                                           'field', struct()))))), ...
                            'use_var_scans', struct('def', 0, 'dims', {[-1], [0, 1]}, ...
                                                    'field', struct()));
            test.verifyEqual(g.dump(), g2dump);

            [id, seq, vars] = test.getseq_withvar(g, 1);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct('A', struct('B', 1), 'B', struct('K', 1)));
            test.verifyEqual(vars, {{{'A', 'C'}, 2}});
            [id, seq, vars] = test.getseq_withvar(g, 2);
            test.verifyEqual(id, 1);
            test.verifyEqual(seq, struct('A', struct('B', 1), 'B', struct('K', 1)));
            test.verifyEqual(vars, {{{'A', 'C'}, 3}});
            [id, seq, vars] = test.getseq_withvar(g, 6);
            test.verifyEqual(id, 6);
            test.verifyEqual(seq, struct('A', struct('B', 2), 'B', struct('K', 1)));
            test.verifyEqual(vars, {{{'A', 'C'}, 2}});
            [id, seq, vars] = test.getseq_withvar(g, 16);
            test.verifyEqual(id, 16);
            test.verifyEqual(seq, struct('A', struct('B', 1), 'B', struct('K', 2)));
            test.verifyEqual(vars, {{{'A', 'C'}, 2}});

            [id, seq, vars] = test.getseq_withvar(g, 31);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct('C', struct('L', 2), ...
                                         'A', struct('B', 1)));
            test.verifyEqual(vars, {{{'A', 'C'}, 2}});
            [id, seq, vars] = test.getseq_withvar(g, 32);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct('C', struct('L', 2), ...
                                         'A', struct('B', 1)));
            test.verifyEqual(vars, {{{'A', 'C'}, 3}});
            [id, seq, vars] = test.getseq_withvar(g, 36);
            test.verifyEqual(id, 36);
            test.verifyEqual(seq, struct('C', struct('L', 3), ...
                                         'A', struct('B', 2)));
            test.verifyEqual(vars, {{{'A', 'C'}, 2}});


            g(1).A.C.usevar(false);
            g(1).B.K.usevar(true);
            g(2).C.L.usevar(true, 1);
            g2dump = struct('version', 1, ...
                            'scans', struct('baseidx', 0, ...
                                            'params', struct(), ...
                                            'vars', {struct('size', {0, 0, 2}, ...
                                                            'params', {struct(), struct(), ...
                                                                       struct('B', struct('K', [1, 2]))}), ...
                                                     struct('size', {0, 3}, ...
                                                            'params', {struct(), ...
                                                                       struct('C', struct('L', [2, 3, 4]))})}), ...
                            'base', struct('params', struct(), ...
                                           'vars', struct('size', {5, 3}, ...
                                                          'params', {struct('A', struct('C', [2, 3, 4, 5, 6])), ...
                                                                     struct('A', struct('B', [1, 2, 3]))})), ...
                            'runparam', struct(), ...
                            'use_var_base', struct('def', -1, 'dims', [1, 0, 1], ...
                                                   'field', struct('A', struct('def', 0, 'dims', [], ...
                                                                               'field', struct('C', struct('def', 1, 'dims', [], ...
                                                                                                           'field', struct()))), ...
                                                                   'B', struct('def', 0, 'dims', [], ...
                                                                               'field', struct('K', struct('def', 0, 'dims', [0, 0, -1], ...
                                                                                                           'field', struct()))), ...
                                                                   'C', struct('def', 0, 'dims', [], ...
                                                                               'field', struct('L', struct('def', -1, 'dims', [], ...
                                                                                                           'field', struct()))))), ...
                            'use_var_scans', struct('def', 0, 'dims', {[-1], [0, 1]}, ...
                                                    'field', {struct('A', struct('def', 0, 'dims', [], ...
                                                                                 'field', struct('C', struct('def', -1, 'dims', [], ...
                                                                                                             'field', struct()))), ...
                                                                     'B', struct('def', 0, 'dims', [], ...
                                                                                 'field', struct('K', struct('def', 1, 'dims', [], ...
                                                                                                             'field', struct())))), ...
                                                              struct('C', struct('def', 0, 'dims', [], ...
                                                                                 'field', struct('L', struct('def', 0, 'dims', [1], ...
                                                                                                             'field', struct()))))}));
            test.verifyEqual(g.dump(), g2dump);

            seq = test.getseq_novar(g, 1);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 1), 'B', struct('K', 1)));
            seq = test.getseq_novar(g, 2);
            test.verifyEqual(seq, struct('A', struct('C', 3, 'B', 1), 'B', struct('K', 1)));
            seq = test.getseq_novar(g, 6);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 2), 'B', struct('K', 1)));
            seq = test.getseq_novar(g, 16);
            test.verifyEqual(seq, struct('A', struct('C', 2, 'B', 1), 'B', struct('K', 2)));

            [id, seq, vars] = test.getseq_withvar(g, 31);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...,
                                    {{'C', 'L'}, 2}, ...
                                    {{'A', 'B'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 32);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 3}, ...,
                                    {{'C', 'L'}, 2}, ...
                                    {{'A', 'B'}, 1}});
            [id, seq, vars] = test.getseq_withvar(g, 36);
            test.verifyEqual(id, 31);
            test.verifyEqual(seq, struct());
            test.verifyEqual(vars, {{{'A', 'C'}, 2}, ...,
                                    {{'C', 'L'}, 3}, ...
                                    {{'A', 'B'}, 2}});
        end
    end
end
